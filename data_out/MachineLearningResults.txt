/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 /Users/vandia/PycharmProjects/MSDEFinalProject/src/duplication_analysis.py
[nltk_data] Downloading package punkt to /Users/vandia/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /Users/vandia/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
Generating the final dataset......
Fetching SourceForge users
Generating reporter reputation
Generating and training doc2vec model
Preprocessing categorical values from bug
Generating bug pair combinations
Generating contextual and text similarities
Shape of complete dataset:
(20119996, 10)
-------------
Shape of training set
(39000, 10)
-------------
Shape of testing set
(7500, 10)
-------------
Shape of training set after SMOTE
60000
60000
-------------
Shape of testing set after SMOTE
12000
12000
-------------
-------------------------------------------------------------------------
Decision Tree only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.99883197,  0.99983331,  0.99916597,  0.99949975,  0.998999  ,
        0.99949975,  0.99933289,  0.99949975,  0.99933289,  0.99949975]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99766667,  0.99966667,  0.99833333,  0.999     ,  0.998     ,
        0.999     ,  0.99866667,  0.999     ,  0.99866667,  0.999     ]), 'score_time': array([ 0.01597309,  0.00992107,  0.00822902,  0.00839996,  0.00854015,
        0.00831103,  0.00819087,  0.00974202,  0.00834394,  0.00822687]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.09821296,  0.08278799,  0.08239293,  0.07490611,  0.07584786,
        0.07575393,  0.0770762 ,  0.07925296,  0.07953906,  0.07615519]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 0.99883333,  0.99983333,  0.99916667,  0.9995    ,  0.999     ,
        0.9995    ,  0.99933333,  0.9995    ,  0.99933333,  0.9995    ]), 'test_accuracy': array([ 0.99883333,  0.99983333,  0.99916667,  0.9995    ,  0.999     ,
        0.9995    ,  0.99933333,  0.9995    ,  0.99933333,  0.9995    ]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.9955
------------
Test roc auc score macro
0.9955
------------
Test accuracy score
0.9955
------------
Test cohen_kappa_score score
0.991
------------
Test precision_recall_fscore score micro
(0.99550000000000005, 0.99550000000000005, 0.99550000000000016, None)
------------
Test precision_recall_fscore score macro
(0.99554013875123881, 0.99550000000000005, 0.99549990887315465, None)
------------
Plotting Decision Tree only bug information
-------------------------------------------------------------------------
Decision Tree with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.998999  ,  0.998999  ,  0.99849775,  0.99933289,  1.        ,
        0.99916597,  0.99949975,  0.99933289,  0.99966656,  0.99966656]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.998     ,  0.998     ,  0.997     ,  0.99866667,  1.        ,
        0.99833333,  0.999     ,  0.99866667,  0.99933333,  0.99933333]), 'score_time': array([ 0.01090407,  0.00885797,  0.00872898,  0.00879884,  0.00875592,
        0.0091269 ,  0.01334691,  0.00912118,  0.00936198,  0.00912213]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.09765387,  0.11722898,  0.10598207,  0.10487413,  0.10039711,
        0.10919714,  0.10759091,  0.10480285,  0.10443783,  0.10054493]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 0.999     ,  0.999     ,  0.9985    ,  0.99933333,  1.        ,
        0.99916667,  0.9995    ,  0.99933333,  0.99966667,  0.99966667]), 'test_accuracy': array([ 0.999     ,  0.999     ,  0.9985    ,  0.99933333,  1.        ,
        0.99916667,  0.9995    ,  0.99933333,  0.99966667,  0.99966667]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.9965
------------
Test roc auc score macro
0.9965
------------
Test accuracy score
0.9965
------------
Test cohen_kappa_score score
0.993
------------
Test precision_recall_fscore score micro
(0.99650000000000005, 0.99650000000000005, 0.99650000000000005, None)
------------
Test precision_recall_fscore score macro
(0.99652432969215488, 0.99649999999999994, 0.99649995712447481, None)
------------
Plotting Decision Tree with reputation analysis
-------------------------------------------------------------------------
Naive Bayes only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.02501646,  0.02566634,  0.01126947,  0.01192843,  0.01192843,
        0.01587302,  0.01324503,  0.01455989,  0.01849406,  0.0171844 ]), 'train_accuracy': array([ 0.50409259,  0.50407407,  0.50448148,  0.50446296,  0.50446296,
        0.50435185,  0.50442593,  0.50438889,  0.50427778,  0.50431481]), 'test_recall': array([ 0.01266667,  0.013     ,  0.00566667,  0.006     ,  0.006     ,
        0.008     ,  0.00666667,  0.00733333,  0.00933333,  0.00866667]), 'score_time': array([ 0.008986  ,  0.00961304,  0.01213002,  0.00763011,  0.00776696,
        0.0093708 ,  0.00780511,  0.00917196,  0.00792098,  0.00770307]), 'train_f1': array([ 0.01623746,  0.01616458,  0.01776668,  0.01769392,  0.01769392,
        0.01725721,  0.01754837,  0.0174028 ,  0.01696596,  0.01711159]), 'fit_time': array([ 0.01329517,  0.01114297,  0.01045203,  0.00989509,  0.00985312,
        0.01426816,  0.010077  ,  0.01070595,  0.01096606,  0.01037002]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 0.50765315,  0.50707632,  0.50366329,  0.50283441,  0.50558114,
        0.50607523,  0.50491105,  0.50449522,  0.5054107 ,  0.50582474]), 'test_accuracy': array([ 0.50633333,  0.5065    ,  0.50283333,  0.503     ,  0.503     ,
        0.504     ,  0.50333333,  0.50366667,  0.50466667,  0.50433333]), 'train_average_precision': array([ 0.50546462,  0.50552928,  0.50590779,  0.50600011,  0.50569559,
        0.50564011,  0.50576934,  0.50581547,  0.50571392,  0.50566776]), 'train_recall': array([ 0.00818519,  0.00814815,  0.00896296,  0.00892593,  0.00892593,
        0.0087037 ,  0.00885185,  0.00877778,  0.00855556,  0.00862963]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.504666666667
------------
Test roc auc score macro
0.504666666667
------------
Test accuracy score
0.504666666667
------------
Test cohen_kappa_score score
0.00933333333333
------------
Test precision_recall_fscore score micro
(0.50466666666666671, 0.50466666666666671, 0.50466666666666671, None)
------------
Test precision_recall_fscore score macro
(0.75117213663764226, 0.50466666666666671, 0.34362063451772168, None)
------------
Plotting Naive Bayes only bug information
-------------------------------------------------------------------------
Naive Bayes with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.43370228,  0.45096283,  0.46204913,  0.43694815,  0.43291995,
        0.45648752,  0.4362978 ,  0.45818345,  0.45257453,  0.45637584]), 'train_accuracy': array([ 0.59303704,  0.59201852,  0.59162963,  0.59266667,  0.59318519,
        0.59137037,  0.59274074,  0.59124074,  0.5915    ,  0.59161111]), 'test_recall': array([ 0.32      ,  0.33566667,  0.348     ,  0.32166667,  0.32      ,
        0.33833333,  0.32133333,  0.33966667,  0.334     ,  0.34      ]), 'score_time': array([ 0.01176214,  0.01133084,  0.01230597,  0.02634501,  0.01127791,
        0.01703906,  0.02340198,  0.02219105,  0.0212791 ,  0.01094508]), 'train_f1': array([ 0.44982976,  0.4479138 ,  0.44665261,  0.44946689,  0.44991987,
        0.44729987,  0.44953945,  0.44711069,  0.44773803,  0.44730709]), 'fit_time': array([ 0.01984096,  0.01595616,  0.01754808,  0.03380394,  0.01431394,
        0.01688504,  0.03919101,  0.04247499,  0.03944683,  0.01601696]), 'train_precision': array([ 0.69406675,  0.69252228,  0.69249922,  0.69314497,  0.69449598,
        0.69088517,  0.69332922,  0.69062911,  0.69087538,  0.69172932]), 'test_average_precision': array([ 0.5729945 ,  0.5806633 ,  0.58129316,  0.57369785,  0.57097973,
        0.5821681 ,  0.57326518,  0.58772428,  0.58336812,  0.58238855]), 'test_accuracy': array([ 0.58216667,  0.59133333,  0.59483333,  0.5855    ,  0.58083333,
        0.59716667,  0.58483333,  0.59833333,  0.596     ,  0.595     ]), 'train_average_precision': array([ 0.58039094,  0.57951374,  0.57943725,  0.5802882 ,  0.5806243 ,
        0.57935569,  0.58033704,  0.57872201,  0.57921625,  0.57931941]), 'train_recall': array([ 0.33274074,  0.331     ,  0.32962963,  0.33255556,  0.33274074,
        0.3307037 ,  0.33259259,  0.33055556,  0.33118519,  0.33051852]), 'test_precision': array([ 0.67274001,  0.68690314,  0.68729427,  0.68101623,  0.66898955,
        0.70145128,  0.67935166,  0.70372928,  0.70168067,  0.69387755])}
---------------
Test roc auc score micro
0.574583333333
------------
Test roc auc score macro
0.574583333333
------------
Test accuracy score
0.574583333333
------------
Test cohen_kappa_score score
0.149166666667
------------
Test precision_recall_fscore score micro
(0.57458333333333333, 0.57458333333333333, 0.57458333333333333, None)
------------
Test precision_recall_fscore score macro
(0.59729741834980032, 0.57458333333333333, 0.54821609185694609, None)
------------
Plotting Naive Bayes with reputation analysis
-------------------------------------------------------------------------
Random Forest only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.99983331,  0.99983331,  0.99983331,  1.        ,  0.99966656,
        1.        ,  0.99983331,  1.        ,  1.        ,  0.99983331]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99966667,  0.99966667,  0.99966667,  1.        ,  0.99933333,
        1.        ,  0.99966667,  1.        ,  1.        ,  0.99966667]), 'score_time': array([ 0.18200707,  0.32810998,  0.17573214,  0.17004085,  0.17670989,
        0.18986702,  0.17651916,  0.16609406,  0.17033911,  0.16637778]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 2.0514009 ,  2.17562819,  2.32781792,  1.98784709,  2.01914907,
        2.31442189,  2.09011197,  2.01242399,  2.00659895,  1.97238922]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99983333,  0.99983333,  0.99983333,  1.        ,  0.99966667,
        1.        ,  0.99983333,  1.        ,  1.        ,  0.99983333]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.998
------------
Test roc auc score macro
0.998
------------
Test accuracy score
0.998
------------
[Parallel(n_jobs=1)]: Done  50 out of  50 | elapsed:    0.0s finished
Test cohen_kappa_score score
0.996
------------
Test precision_recall_fscore score micro
(0.998, 0.998, 0.998, None)
------------
Test precision_recall_fscore score macro
(0.99800796812749004, 0.998, 0.99799999199996803, None)
------------
Plotting Random Forest only bug information
-------------------------------------------------------------------------
Random Forest with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.99983331,  1.        ,  1.        ,  0.99983331,  1.        ,
        1.        ,  1.        ,  1.        ,  1.        ,  0.99983331]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99966667,  1.        ,  1.        ,  0.99966667,  1.        ,
        1.        ,  1.        ,  1.        ,  1.        ,  0.99966667]), 'score_time': array([ 0.1782558 ,  0.17702103,  0.18442082,  0.17836595,  0.19504905,
        0.18184209,  0.17794299,  0.221627  ,  0.19489217,  0.22573185]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 4.2351222 ,  1.56800699,  2.06042218,  1.59039903,  1.61459684,
        1.89804506,  1.64749789,  1.5415628 ,  1.61032391,  1.73980713]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99983333,  1.        ,  1.        ,  0.99983333,  1.        ,
        1.        ,  1.        ,  1.        ,  1.        ,  0.99983333]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.998583333333
------------
Test roc auc score macro
0.998583333333
------------
Test accuracy score
0.998583333333
------------
[Parallel(n_jobs=1)]: Done  50 out of  50 | elapsed:    0.0s finished
Test cohen_kappa_score score
0.997166666667
------------
Test precision_recall_fscore score micro
(0.99858333333333338, 0.99858333333333338, 0.99858333333333338, None)
------------
Test precision_recall_fscore score macro
(0.99858733588166859, 0.99858333333333338, 0.99858333049015635, None)
------------
Plotting Random Forest with reputation analysis
-------------------------------------------------------------------------
Extreme Randomized Tree only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.99966656,  1.        ,  0.99983331,  0.99983331,  0.99966656,
        0.99933289,  0.99966656,  0.99983331,  0.99966656,  1.        ]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99933333,  1.        ,  0.99966667,  0.99966667,  0.99933333,
        0.99866667,  0.99933333,  0.99966667,  0.99933333,  1.        ]), 'score_time': array([ 0.0551641 ,  0.05440402,  0.06188703,  0.05498099,  0.05739403,
        0.07085705,  0.08585   ,  0.06673288,  0.08115697,  0.06280899]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.15048289,  0.14723396,  0.14522195,  0.15046   ,  0.16359091,
        0.21831417,  0.18545198,  0.15206003,  0.16195202,  0.14992809]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99966667,  1.        ,  0.99983333,  0.99983333,  0.99966667,
        0.99933333,  0.99966667,  0.99983333,  0.99966667,  1.        ]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.998666666667
------------
Test roc auc score macro
0.998666666667
------------
Test accuracy score
0.998666666667
------------
[Parallel(n_jobs=1)]: Done  10 out of  10 | elapsed:    0.0s finished
Test cohen_kappa_score score
0.997333333333
------------
Test precision_recall_fscore score micro
(0.9986666666666667, 0.9986666666666667, 0.9986666666666667, None)
------------
Test precision_recall_fscore score macro
(0.99867021276595747, 0.99866666666666659, 0.99866666429629203, None)
------------
Plotting Extreme Randomized Tree only bug information
-------------------------------------------------------------------------
Extreme Randomized Tree with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.99983331,  0.99966656,  0.99966656,  0.99933289,  0.99966656,
        0.99966656,  1.        ,  1.        ,  0.99983331,  0.99966656]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99966667,  0.99933333,  0.99933333,  0.99866667,  0.99933333,
        0.99933333,  1.        ,  1.        ,  0.99966667,  0.99933333]), 'score_time': array([ 0.06143498,  0.05630708,  0.05594492,  0.05085897,  0.054811  ,
        0.05234504,  0.05546999,  0.051579  ,  0.05376482,  0.05238605]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.19119596,  0.19685984,  0.1887641 ,  0.18542695,  0.18654609,
        0.19644785,  0.18837905,  0.18805718,  0.18961906,  0.18920207]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99983333,  0.99966667,  0.99966667,  0.99933333,  0.99966667,
        0.99966667,  1.        ,  1.        ,  0.99983333,  0.99966667]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.997833333333
------------
Test roc auc score macro
0.997833333333
------------
Test accuracy score
0.997833333333
------------
Test cohen_kappa_score score
0.995666666667
------------
Test precision_recall_fscore score micro
(0.99783333333333335, 0.99783333333333335, 0.99783333333333335, None)
------------
Test precision_recall_fscore score macro
(0.99784268171257884, 0.99783333333333335, 0.99783332316198936, None)
------------
Plotting Extreme Randomized Tree with reputation analysis
-------------------------------------------------------------------------
Adaboost Class. only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.8852518 ,  0.90292813,  0.88696879,  0.88723443,  0.88544669,
        0.9014592 ,  0.90421318,  0.90690472,  0.88924847,  0.90441969]), 'train_accuracy': array([ 0.89687037,  0.90272222,  0.89440741,  0.90114815,  0.89211111,
        0.90605556,  0.90905556,  0.91592593,  0.90057407,  0.90522222]), 'test_recall': array([ 0.82033333,  0.848     ,  0.83833333,  0.81433333,  0.81933333,
        0.834     ,  0.837     ,  0.82966667,  0.82433333,  0.839     ]), 'score_time': array([ 0.31113601,  0.35172391,  0.33115602,  0.32626796,  0.35423088,
        0.32454205,  0.35735011,  0.38118482,  0.32495904,  0.40003109]), 'train_f1': array([ 0.88901289,  0.8960399 ,  0.88807757,  0.89221823,  0.88336336,
        0.89817547,  0.90170726,  0.90820865,  0.89350814,  0.89713803]), 'fit_time': array([ 2.43594718,  2.29332805,  2.37867904,  2.17796111,  2.32834721,
        2.07142591,  2.25843191,  2.22166514,  2.06480813,  2.41989994]), 'train_precision': array([ 0.96233335,  0.96213184,  0.94470893,  0.98082216,  0.96130719,
        0.98041278,  0.98096939,  1.        ,  0.96186531,  0.98079627]), 'test_average_precision': array([ 0.96182789,  0.97077761,  0.96421582,  0.96578142,  0.96689723,
        0.96910177,  0.9688734 ,  0.97001061,  0.96874898,  0.96869188]), 'test_accuracy': array([ 0.89366667,  0.90883333,  0.89316667,  0.8965    ,  0.894     ,
        0.90883333,  0.91133333,  0.91483333,  0.89733333,  0.91133333]), 'train_average_precision': array([ 0.96531787,  0.96894486,  0.96449093,  0.96792666,  0.96496619,
        0.96689127,  0.96898012,  0.97057526,  0.96976163,  0.96676081]), 'train_recall': array([ 0.82607407,  0.83844444,  0.83785185,  0.8182963 ,  0.81711111,
        0.82866667,  0.8342963 ,  0.83185185,  0.83422222,  0.82662963]), 'test_precision': array([ 0.96132812,  0.9654649 ,  0.94159491,  0.97447148,  0.96316614,
        0.98079185,  0.98316366,  1.        ,  0.96526151,  0.98090413])}
---------------
Test roc auc score micro
0.909166666667
------------
Test roc auc score macro
0.909166666667
------------
Test accuracy score
0.909166666667
------------
Test cohen_kappa_score score
0.818333333333
------------
Test precision_recall_fscore score micro
(0.90916666666666668, 0.90916666666666668, 0.90916666666666668, None)
------------
Test precision_recall_fscore score macro
(0.91778989655261212, 0.90916666666666668, 0.90869553308113016, None)
------------
Plotting Adaboost Class. only bug information
-------------------------------------------------------------------------
Adaboost Class. with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.93654114,  0.94252874,  0.92937456,  0.92509493,  0.93333333,
        0.93273543,  0.93160749,  0.9369338 ,  0.92948381,  0.93135564]), 'train_accuracy': array([ 0.93968519,  0.93944444,  0.94046296,  0.93001852,  0.93688889,
        0.93053704,  0.93759259,  0.93964815,  0.93840741,  0.93083333]), 'test_recall': array([ 0.89533333,  0.902     ,  0.88166667,  0.89333333,  0.896     ,
        0.90133333,  0.88766667,  0.89633333,  0.88533333,  0.9       ]), 'score_time': array([ 0.32199597,  0.35442305,  0.32360196,  0.38486314,  0.33303404,
        0.36397815,  0.34275603,  0.36116982,  0.33813715,  0.34099793]), 'train_f1': array([ 0.9368933 ,  0.93665982,  0.93782273,  0.92729476,  0.93377895,
        0.92792775,  0.93461135,  0.93684965,  0.93544756,  0.92824621]), 'fit_time': array([ 2.54205608,  2.65918612,  2.83167386,  2.76823497,  2.71392393,
        2.842067  ,  2.671422  ,  2.74833107,  2.69182897,  3.45564795]), 'train_precision': array([ 0.98236561,  0.98180785,  0.98134132,  0.96484766,  0.98217789,
        0.96414454,  0.98149808,  0.98240338,  0.98267004,  0.96431565]), 'test_average_precision': array([ 0.98141541,  0.98199856,  0.98124469,  0.98140839,  0.98361447,
        0.98394779,  0.98178475,  0.98206435,  0.98065476,  0.98268866]), 'test_accuracy': array([ 0.93933333,  0.945     ,  0.933     ,  0.92766667,  0.936     ,
        0.935     ,  0.93483333,  0.93966667,  0.93283333,  0.93366667]), 'train_average_precision': array([ 0.98220523,  0.98138607,  0.98310034,  0.98194035,  0.98175317,
        0.98305159,  0.98210878,  0.98299579,  0.98330311,  0.98155426]), 'train_recall': array([ 0.89544444,  0.89548148,  0.898     ,  0.89255556,  0.88992593,
        0.89433333,  0.892     ,  0.89533333,  0.89255556,  0.89477778]), 'test_precision': array([ 0.98172515,  0.9868709 ,  0.98254086,  0.95919828,  0.97391304,
        0.96640457,  0.98012514,  0.98138686,  0.97826888,  0.96497498])}
---------------
Test roc auc score micro
0.937333333333
------------
Test roc auc score macro
0.937333333333
------------
Test accuracy score
0.937333333333
------------
Test cohen_kappa_score score
0.874666666667
------------
Test precision_recall_fscore score micro
(0.93733333333333335, 0.93733333333333335, 0.93733333333333335, None)
------------
Test precision_recall_fscore score macro
(0.93982941412844712, 0.93733333333333335, 0.93724429693639788, None)
------------
Plotting Adaboost Class. with reputation analysis
-------------------------------------------------------------------------
Logistic Regression only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.74585182,  0.75198413,  0.74983411,  0.75905975,  0.7576803 ,
        0.75639967,  0.75289135,  0.75529488,  0.74382614,  0.74875704]), 'train_accuracy': array([ 0.74766667,  0.74681481,  0.74675926,  0.74659259,  0.74638889,
        0.74609259,  0.74748148,  0.7472963 ,  0.74768519,  0.74688889]), 'test_recall': array([ 0.75666667,  0.758     ,  0.75333333,  0.775     ,  0.76866667,
        0.76333333,  0.77033333,  0.77266667,  0.753     ,  0.753     ]), 'score_time': array([ 0.00761914,  0.00760913,  0.00770593,  0.00753188,  0.00748205,
        0.00727606,  0.00802803,  0.00792503,  0.00761008,  0.00752187]), 'train_f1': array([ 0.75145921,  0.75080198,  0.75078818,  0.75028286,  0.75021431,
        0.74999544,  0.75113155,  0.75097631,  0.75150012,  0.75088397]), 'fit_time': array([ 0.0696559 ,  0.05209398,  0.05087209,  0.05189204,  0.05244398,
        0.05238891,  0.05115604,  0.05235314,  0.04984689,  0.05073905]), 'train_precision': array([ 0.74033209,  0.73916164,  0.7390306 ,  0.73951363,  0.73906637,
        0.73864167,  0.7404289 ,  0.74019714,  0.74030687,  0.73921625]), 'test_average_precision': array([ 0.81710613,  0.82465455,  0.82198144,  0.82516197,  0.82117212,
        0.83078015,  0.82450357,  0.83406442,  0.81394298,  0.82514352]), 'test_accuracy': array([ 0.74216667,  0.75      ,  0.74866667,  0.754     ,  0.75416667,
        0.75416667,  0.74716667,  0.74966667,  0.74066667,  0.74733333]), 'train_average_precision': array([ 0.82202649,  0.82109015,  0.82152966,  0.82112355,  0.82156735,
        0.82052456,  0.82125673,  0.82032439,  0.8224571 ,  0.82110629]), 'train_recall': array([ 0.76292593,  0.76281481,  0.76292593,  0.76137037,  0.7617037 ,
        0.7617037 ,  0.76214815,  0.76207407,  0.76303704,  0.76292593]), 'test_precision': array([ 0.73534176,  0.74606299,  0.74636724,  0.743762  ,  0.74700356,
        0.74959083,  0.73622173,  0.73868706,  0.73487313,  0.74456163])}
---------------
Test roc auc score micro
0.745583333333
------------
Test roc auc score macro
0.745583333333
------------
Test accuracy score
0.745583333333
------------
Test cohen_kappa_score score
0.491166666667
------------
Test precision_recall_fscore score micro
(0.74558333333333338, 0.74558333333333338, 0.74558333333333338, None)
------------
Test precision_recall_fscore score macro
(0.74565572671124114, 0.74558333333333326, 0.7455645881577484, None)
------------
Plotting Logistic Regression only bug information
-------------------------------------------------------------------------
Logistic Regression with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.77930803,  0.78180906,  0.77699766,  0.78402417,  0.77293233,
        0.78474661,  0.77954847,  0.77546917,  0.76621418,  0.7748831 ]), 'train_accuracy': array([ 0.77638889,  0.77664815,  0.77692593,  0.77603704,  0.77772222,
        0.7762963 ,  0.77735185,  0.77714815,  0.77792593,  0.77712963]), 'test_recall': array([ 0.77333333,  0.77933333,  0.77466667,  0.77866667,  0.771     ,
        0.782     ,  0.78266667,  0.77133333,  0.762     ,  0.77333333]), 'score_time': array([ 0.00761008,  0.008039  ,  0.0081079 ,  0.01151109,  0.00797486,
        0.0072968 ,  0.00733495,  0.00785804,  0.00822902,  0.00712013]), 'train_f1': array([ 0.77502655,  0.77527064,  0.77548738,  0.77468515,  0.77635134,
        0.77492081,  0.77586175,  0.77579461,  0.77652715,  0.77565477]), 'fit_time': array([ 0.15042901,  0.14676404,  0.15358496,  0.16974998,  0.16020107,
        0.14544201,  0.14610004,  0.14812994,  0.14659905,  0.17036986]), 'train_precision': array([ 0.7797773 ,  0.78008174,  0.78052075,  0.77938971,  0.78116915,
        0.77971504,  0.7810893 ,  0.78053535,  0.78144925,  0.78082192]), 'test_average_precision': array([ 0.86031554,  0.86656113,  0.85833279,  0.86235766,  0.84649842,
        0.86133245,  0.85252172,  0.85690571,  0.84922017,  0.85296295]), 'test_accuracy': array([ 0.781     ,  0.7825    ,  0.77766667,  0.7855    ,  0.7735    ,
        0.7855    ,  0.77866667,  0.77666667,  0.7675    ,  0.77533333]), 'train_average_precision': array([ 0.85495514,  0.85403674,  0.85490212,  0.85458433,  0.85640306,
        0.8547278 ,  0.85561549,  0.85521394,  0.85616072,  0.85556856]), 'train_recall': array([ 0.77033333,  0.77051852,  0.77051852,  0.77003704,  0.77159259,
        0.77018519,  0.7707037 ,  0.77111111,  0.77166667,  0.77055556]), 'test_precision': array([ 0.78537576,  0.78430057,  0.77934272,  0.7894559 ,  0.77487437,
        0.78751259,  0.77645503,  0.7796496 ,  0.77047523,  0.77643909])}
---------------
Test roc auc score micro
0.739083333333
------------
Test roc auc score macro
0.739083333333
------------
Test accuracy score
0.739083333333
------------
Test cohen_kappa_score score
0.478166666667
------------
Test precision_recall_fscore score micro
(0.73908333333333331, 0.73908333333333331, 0.73908333333333331, None)
------------
Test precision_recall_fscore score macro
(0.73938501830264924, 0.73908333333333331, 0.7390011023681482, None)
------------
Plotting Logistic Regression with reputation analysis
-------------------------------------------------------------------------
Support Vector Classification only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.72861929,  0.73801521,  0.73454289,  0.73587894,  0.72943647,
        0.73007532,  0.73539886,  0.73753561,  0.73459968,  0.72531804]), 'train_accuracy': array([ 0.74342593,  0.7527963 ,  0.7432037 ,  0.74324074,  0.74468519,
        0.74342593,  0.75248148,  0.75233333,  0.7522037 ,  0.75272222]), 'test_recall': array([ 0.68866667,  0.69533333,  0.695     ,  0.697     ,  0.69466667,
        0.69466667,  0.68833333,  0.69033333,  0.68966667,  0.67466667]), 'score_time': array([ 14.15181303,  14.28603506,  13.72740293,  14.8137908 ,
        14.314785  ,  20.860425  ,  16.75330806,  16.54029703,
        14.85176897,  14.02668905]), 'train_f1': array([ 0.7282001 ,  0.73551148,  0.72803938,  0.72808927,  0.72962956,
        0.72798665,  0.73525334,  0.73511586,  0.73474081,  0.73551607]), 'fit_time': array([   67.54044104,    61.55879402,    60.63584304,    74.91941118,
          63.96111107,  1900.867167  ,    76.72083902,    74.97271991,
          70.11586404,    63.34975791]), 'train_precision': array([ 0.77413973,  0.79080568,  0.77372963,  0.77374849,  0.77535114,
        0.77459787,  0.79025803,  0.79003831,  0.79044572,  0.79052242]), 'test_average_precision': array([ 0.83611232,  0.83177498,  0.83527989,  0.838209  ,  0.83315863,
        0.83261655,  0.83179822,  0.82926683,  0.83021173,  0.82712704]), 'test_accuracy': array([ 0.7435    ,  0.75316667,  0.74883333,  0.74983333,  0.74233333,
        0.74316667,  0.75233333,  0.75433333,  0.75083333,  0.7445    ]), 'train_average_precision': array([ 0.83015777,  0.83005683,  0.83022705,  0.83012462,  0.83056226,
        0.829931  ,  0.83002731,  0.83022487,  0.83005845,  0.83062514]), 'train_recall': array([ 0.68740741,  0.68744444,  0.68744444,  0.68751852,  0.689     ,
        0.68666667,  0.68740741,  0.68733333,  0.68637037,  0.68766667]), 'test_precision': array([ 0.77349307,  0.78627968,  0.77885693,  0.77935147,  0.7678703 ,
        0.76928756,  0.78937309,  0.79166667,  0.78579567,  0.78419217])}
---------------
Test roc auc score micro
0.74775
------------
Test roc auc score macro
0.74775
------------
Test accuracy score
0.74775
------------
Test cohen_kappa_score score
0.4955
------------
Test precision_recall_fscore score micro
(0.74775000000000003, 0.74775000000000003, 0.74775000000000014, None)
------------
Test precision_recall_fscore score macro
(0.74816377863368011, 0.74775000000000003, 0.74764480819174794, None)
------------
Plotting Support Vector Classification only bug information
-------------------------------------------------------------------------
Support Vector Classification with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[30000 30000]
---------------
Number of different class test dataset
[6000 6000]
---------------
Training scores
{'test_f1': array([ 0.78986995,  0.79138167,  0.78348063,  0.78598036,  0.79256227,
        0.78444029,  0.79623288,  0.79635989,  0.78927466,  0.79809815]), 'train_accuracy': array([ 0.79462963,  0.79474074,  0.79596296,  0.79568519,  0.7945    ,
        0.79566667,  0.79366667,  0.79355556,  0.79498148,  0.795     ]), 'test_recall': array([ 0.76933333,  0.77133333,  0.76833333,  0.77366667,  0.77433333,
        0.76966667,  0.775     ,  0.773     ,  0.76533333,  0.78333333]), 'score_time': array([ 15.28944206,  16.38355494,  16.26592612,  15.37084699,
        14.47439289,  15.39682198,  14.83865404,  14.53363585,
        14.64278388,  15.8954761 ]), 'train_f1': array([ 0.78973912,  0.78989271,  0.79104874,  0.79065708,  0.78955453,
        0.79068973,  0.78871316,  0.78865549,  0.79028622,  0.790174  ]), 'fit_time': array([ 70.65705085,  70.77531099,  66.99409986,  61.94723415,
        65.81897712,  70.39165092,  65.72178698,  61.00411296,
        63.08052015,  66.94842386]), 'train_precision': array([ 0.80900404,  0.80900054,  0.81057132,  0.81060577,  0.80902413,
        0.8104293 ,  0.80811378,  0.80782973,  0.80880927,  0.80922432]), 'test_average_precision': array([ 0.90014368,  0.89950271,  0.89367986,  0.89459045,  0.89593004,
        0.89397391,  0.89711173,  0.90303794,  0.89770602,  0.89691463]), 'test_accuracy': array([ 0.79533333,  0.79666667,  0.78766667,  0.78933333,  0.79733333,
        0.7885    ,  0.80166667,  0.80233333,  0.79566667,  0.80183333]), 'train_average_precision': array([ 0.89520713,  0.8951916 ,  0.8957231 ,  0.89596406,  0.89554958,
        0.89572295,  0.89564043,  0.89489485,  0.89544225,  0.89558534]), 'train_recall': array([ 0.77137037,  0.77166667,  0.77244444,  0.77166667,  0.771     ,
        0.77188889,  0.77022222,  0.77037037,  0.77259259,  0.772     ]), 'test_precision': array([ 0.81153305,  0.8125    ,  0.79923717,  0.79869236,  0.81167016,
        0.79979217,  0.81866197,  0.82117564,  0.81476224,  0.81343025])}
---------------
Test roc auc score micro
0.76625
------------
Test roc auc score macro
0.76625
------------
Test accuracy score
0.76625
------------
Test cohen_kappa_score score
0.5325
------------
Test precision_recall_fscore score micro
(0.76624999999999999, 0.76624999999999999, 0.7662500000000001, None)
------------
Test precision_recall_fscore score macro
(0.76625710758556642, 0.7662500000000001, 0.7662484400329922, None)
------------
Plotting Support Vector Classification with reputation analysis

Process finished with exit code 0