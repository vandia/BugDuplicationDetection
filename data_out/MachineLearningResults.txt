[nltk_data] Downloading package punkt to /Users/vandia/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /Users/vandia/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
Shape of complete dataset: 
(20119996, 10)
-------------
Shape of training set
(77350, 10)
-------------
Shape of testing set
(14875, 10)
-------------
Shape of training set after SMOTE
119000
119000
-------------
Shape of testing set after SMOTE
23800
23800
-------------
-------------------------------------------------------------------------
Decision Tree only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.99899058,  0.99899058,  0.99915896,  0.99941142,  0.99957966,
        0.99924313,  0.99899058,  0.99957966,  0.99924313,  0.99856938]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99798319,  0.99798319,  0.99831933,  0.99882353,  0.99915966,
        0.99848739,  0.99798319,  0.99915966,  0.99848739,  0.99714286]), 'score_time': array([ 0.01608014,  0.01585007,  0.01625013,  0.01715279,  0.01603699,
        0.01618099,  0.01880193,  0.01697803,  0.01615906,  0.01671195]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.24875998,  0.21670985,  0.23038101,  0.23475409,  0.21942401,
        0.23329401,  0.2186079 ,  0.22328091,  0.22617984,  0.23379397]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 0.9989916 ,  0.9989916 ,  0.99915966,  0.99941176,  0.99957983,
        0.9992437 ,  0.9989916 ,  0.99957983,  0.9992437 ,  0.99857143]), 'test_accuracy': array([ 0.9989916 ,  0.9989916 ,  0.99915966,  0.99941176,  0.99957983,
        0.9992437 ,  0.9989916 ,  0.99957983,  0.9992437 ,  0.99857143]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.995294117647
------------
Test roc auc score macro
0.995294117647
------------
Test accuracy score
0.995294117647
------------
Test cohen_kappa_score score
0.990588235294
------------
Test precision_recall_fscore score micro
(0.99529411764705877, 0.99529411764705877, 0.99529411764705877, None)
------------
Test precision_recall_fscore score macro
(0.99533799533799527, 0.99529411764705888, 0.99529401343143931, None)
------------
Plotting Decision Tree only bug information
-------------------------------------------------------------------------
Decision Tree with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.99949554,  0.99941142,  0.99899058,  0.99915896,  0.99865365,
        0.99949554,  0.99932728,  0.99899058,  0.99941142,  0.99924313]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.9989916 ,  0.99882353,  0.99798319,  0.99831933,  0.99731092,
        0.9989916 ,  0.99865546,  0.99798319,  0.99882353,  0.99848739]), 'score_time': array([ 0.01658893,  0.01627088,  0.01858306,  0.01609707,  0.01644993,
        0.01681209,  0.01626396,  0.01610494,  0.0170989 ,  0.01672506]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.28256702,  0.27265215,  0.28461385,  0.26654315,  0.28011513,
        0.28276706,  0.26815295,  0.29035211,  0.29462695,  0.27107096]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 0.9994958 ,  0.99941176,  0.9989916 ,  0.99915966,  0.99865546,
        0.9994958 ,  0.99932773,  0.9989916 ,  0.99941176,  0.9992437 ]), 'test_accuracy': array([ 0.9994958 ,  0.99941176,  0.9989916 ,  0.99915966,  0.99865546,
        0.9994958 ,  0.99932773,  0.9989916 ,  0.99941176,  0.9992437 ]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.995714285714
------------
Test roc auc score macro
0.995714285714
------------
Test accuracy score
0.995714285714
------------
Test cohen_kappa_score score
0.991428571429
------------
Test precision_recall_fscore score micro
(0.99571428571428566, 0.99571428571428566, 0.99571428571428566, None)
------------
Test precision_recall_fscore score macro
(0.99575070821529743, 0.99571428571428577, 0.99571420699563862, None)
------------
Plotting Decision Tree with reputation analysis
-------------------------------------------------------------------------
Naive Bayes only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.66594484,  0.66640132,  0.6673124 ,  0.66643863,  0.66674269,
        0.66586935,  0.66529844,  0.66791937,  0.66810909,  0.66484704]), 'train_accuracy': array([ 0.50878618,  0.50883287,  0.50857143,  0.50868347,  0.50862745,
        0.50883287,  0.50887021,  0.50850607,  0.50847806,  0.50908497]), 'test_recall': array([ 0.98201681,  0.98487395,  0.98420168,  0.98235294,  0.98268908,
        0.98252101,  0.98067227,  0.98571429,  0.98605042,  0.98252101]), 'score_time': array([ 0.01305795,  0.01341009,  0.01441383,  0.01553893,  0.01362395,
        0.01472712,  0.01435494,  0.01268196,  0.01566911,  0.01318908]), 'train_f1': array([ 0.66701268,  0.66696212,  0.66686077,  0.66695781,  0.66692405,
        0.66702114,  0.66708439,  0.66679327,  0.66677217,  0.66713516]), 'fit_time': array([ 0.03906512,  0.02410293,  0.02650213,  0.02514601,  0.023314  ,
        0.02683783,  0.02732301,  0.02303195,  0.02434802,  0.02431989]), 'train_precision': array([ 0.50450494,  0.50453056,  0.50439495,  0.50445198,  0.50442317,
        0.50452935,  0.50454772,  0.5043619 ,  0.50434758,  0.50465983]), 'test_average_precision': array([ 0.50722817,  0.50793428,  0.50853705,  0.50811104,  0.50894844,
        0.50785083,  0.50634654,  0.50900099,  0.50887912,  0.50654572]), 'test_accuracy': array([ 0.50739496,  0.50697479,  0.50932773,  0.50831933,  0.50882353,
        0.50697479,  0.50663866,  0.50991597,  0.51016807,  0.50470588]), 'train_average_precision': array([ 0.50863351,  0.50855529,  0.50848813,  0.50853541,  0.50844236,
        0.50856454,  0.50873143,  0.50843665,  0.50845029,  0.50871034]), 'train_recall': array([ 0.98395892,  0.98364146,  0.98371615,  0.98392157,  0.98388422,
        0.98390289,  0.98410831,  0.98354809,  0.98351074,  0.98390289]), 'test_precision': array([ 0.50379376,  0.50356621,  0.50478407,  0.50427055,  0.50453016,
        0.50357481,  0.50340782,  0.50508095,  0.50520968,  0.50240633])}
---------------
Test roc auc score micro
0.507773109244
------------
Test roc auc score macro
0.507773109244
------------
Test accuracy score
0.507773109244
------------
Test cohen_kappa_score score
0.0155462184874
------------
Test precision_recall_fscore score micro
(0.50777310924369745, 0.50777310924369745, 0.50777310924369745, None)
------------
Test precision_recall_fscore score macro
(0.58384893860536158, 0.50777310924369745, 0.36337013311386013, None)
------------
Plotting Naive Bayes only bug information
-------------------------------------------------------------------------
Naive Bayes with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.43308571,  0.43306738,  0.41848495,  0.44556962,  0.42696629,
        0.4345701 ,  0.43956289,  0.44361151,  0.43666777,  0.44278385]), 'train_accuracy': array([ 0.57215686,  0.57218487,  0.57294118,  0.57144725,  0.57298786,
        0.57194211,  0.57134454,  0.57154062,  0.57221289,  0.57106443]), 'test_recall': array([ 0.32823529,  0.32840336,  0.31428571,  0.34016807,  0.32571429,
        0.3287395 ,  0.3312605 ,  0.33815126,  0.33344538,  0.33361345]), 'score_time': array([ 0.02140403,  0.025244  ,  0.02284288,  0.02221298,  0.02224612,
        0.022228  ,  0.02213883,  0.02588701,  0.02193809,  0.02221298]), 'train_f1': array([ 0.4347987 ,  0.43480084,  0.43640486,  0.4334    ,  0.43548566,
        0.43463355,  0.43408158,  0.43362133,  0.4343983 ,  0.43372573]), 'fit_time': array([ 0.05329585,  0.04198098,  0.0397501 ,  0.03670692,  0.03699088,
        0.03998113,  0.03962207,  0.03967094,  0.03681993,  0.03639102]), 'train_precision': array([ 0.64039677,  0.6404768 ,  0.64150123,  0.63935023,  0.64231876,
        0.63989252,  0.63855946,  0.63946123,  0.64085379,  0.63800544]), 'test_average_precision': array([ 0.56330864,  0.56055317,  0.5558665 ,  0.56836892,  0.55658625,
        0.56231396,  0.56627788,  0.56521212,  0.56072174,  0.56783276]), 'test_accuracy': array([ 0.57033613,  0.57008403,  0.56327731,  0.57672269,  0.56285714,
        0.57226891,  0.57764706,  0.57588235,  0.56983193,  0.58016807]), 'train_average_precision': array([ 0.56404736,  0.56326545,  0.56489237,  0.56352892,  0.56375532,
        0.56416714,  0.56373743,  0.56274747,  0.56434043,  0.56248017]), 'train_recall': array([ 0.32913165,  0.32911298,  0.33068161,  0.32780579,  0.32941176,
        0.32907563,  0.32879552,  0.32802988,  0.32855275,  0.32853408]), 'test_precision': array([ 0.63636364,  0.63565387,  0.6260462 ,  0.64561404,  0.61956522,
        0.64089122,  0.65308151,  0.64466517,  0.63245139,  0.6581565 ])}
---------------
Test roc auc score micro
0.574621848739
------------
Test roc auc score macro
0.574621848739
------------
Test accuracy score
0.574621848739
------------
Test cohen_kappa_score score
0.149243697479
------------
Test precision_recall_fscore score micro
(0.57462184873949584, 0.57462184873949584, 0.57462184873949584, None)
------------
Test precision_recall_fscore score macro
(0.59739221631291239, 0.57462184873949584, 0.54821493343528171, None)
------------
Plotting Naive Bayes with reputation analysis
-------------------------------------------------------------------------
Random Forest only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.9998319 ,  0.99966375,  0.99991596,  0.99991596,  0.99974784,
        0.99957966,  0.99966375,  0.99949554,  0.99991596,  0.99957966]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99966387,  0.99932773,  0.99983193,  0.99983193,  0.9994958 ,
        0.99915966,  0.99932773,  0.9989916 ,  0.99983193,  0.99915966]), 'score_time': array([ 0.41929388,  0.43087482,  0.4459269 ,  0.42751002,  0.41487288,
        0.402776  ,  0.40828109,  0.41575193,  0.41612101,  0.40719795]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 5.42989492,  5.63797402,  6.40422511,  5.49771309,  5.48768711,
        5.05468297,  5.07756901,  5.14158201,  5.18393588,  5.09342003]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99983193,  0.99966387,  0.99991597,  0.99991597,  0.9997479 ,
        0.99957983,  0.99966387,  0.9994958 ,  0.99991597,  0.99957983]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.997983193277
------------
Test roc auc score macro
0.997983193277
------------
Test accuracy score
0.997983193277
------------
Test cohen_kappa_score score
0.995966386555
------------
Test precision_recall_fscore score micro
(0.99798319327731089, 0.99798319327731089, 0.99798319327731089, None)
------------
Test precision_recall_fscore score macro
(0.99799129561432876, 0.99798319327731089, 0.99798318507389738, None)
------------
Plotting Random Forest only bug information
-------------------------------------------------------------------------
Random Forest with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.9998319 ,  0.99991596,  0.9998319 ,  1.        ,  0.99991596,
        0.9998319 ,  0.99966375,  0.99991596,  0.99974784,  0.99974784]), 'train_accuracy': array([ 1.        ,  0.99999066,  1.        ,  1.        ,  1.        ,
        1.        ,  1.        ,  1.        ,  1.        ,  1.        ]), 'test_recall': array([ 0.99966387,  0.99983193,  0.99966387,  1.        ,  0.99983193,
        0.99966387,  0.99932773,  0.99983193,  0.9994958 ,  0.9994958 ]), 'score_time': array([ 0.40891886,  0.42224503,  0.43801999,  0.41256285,  0.399791  ,
        0.40104198,  0.3776989 ,  0.37577009,  0.38597703,  0.36887121]), 'train_f1': array([ 1.        ,  0.99999066,  1.        ,  1.        ,  1.        ,
        1.        ,  1.        ,  1.        ,  1.        ,  1.        ]), 'fit_time': array([ 3.75486493,  3.77427316,  3.80859494,  3.63906908,  4.23715806,
        4.64835811,  3.81375313,  3.63120794,  4.01879597,  3.71111488]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99983193,  0.99991597,  0.99983193,  1.        ,  0.99991597,
        0.99983193,  0.99966387,  0.99991597,  0.9997479 ,  0.9997479 ]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.        ,  0.99998133,  1.        ,  1.        ,  1.        ,
        1.        ,  1.        ,  1.        ,  1.        ,  1.        ]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.998907563025
------------
Test roc auc score macro
0.998907563025
------------
Test accuracy score
0.998907563025
------------
Test cohen_kappa_score score
0.99781512605
------------
Test precision_recall_fscore score micro
(0.99890756302521011, 0.99890756302521011, 0.99890756302521011, None)
------------
Test precision_recall_fscore score macro
(0.99890994465872884, 0.99890756302521011, 0.99890756172147399, None)
------------
Plotting Random Forest with reputation analysis
-------------------------------------------------------------------------
Extreme Randomized Tree only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.99974784,  0.99991596,  0.99991596,  0.99991596,  0.9998319 ,
        0.99957966,  0.99957966,  0.9998319 ,  0.9998319 ,  0.9998319 ]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.9994958 ,  0.99983193,  0.99983193,  0.99983193,  0.99966387,
        0.99915966,  0.99915966,  0.99966387,  0.99966387,  0.99966387]), 'score_time': array([ 0.12251401,  0.11523485,  0.120049  ,  0.11649513,  0.11784887,
        0.11452389,  0.11339307,  0.12255001,  0.11725092,  0.11719894]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.30621099,  0.29207611,  0.31669712,  0.30343199,  0.29694915,
        0.29881716,  0.29212904,  0.31207085,  0.30280709,  0.30435014]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.9997479 ,  0.99991597,  0.99991597,  0.99991597,  0.99983193,
        0.99957983,  0.99957983,  0.99983193,  0.99983193,  0.99983193]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.998739495798
------------
Test roc auc score macro
0.998739495798
------------
Test accuracy score
0.998739495798
------------
Test cohen_kappa_score score
0.997478991597
------------
Test precision_recall_fscore score micro
(0.99873949579831933, 0.99873949579831933, 0.99873949579831933, None)
------------
Test precision_recall_fscore score macro
(0.99874266554903612, 0.99873949579831933, 0.99873949379553784, None)
------------
Plotting Extreme Randomized Tree only bug information
-------------------------------------------------------------------------
Extreme Randomized Tree with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.99966375,  0.99949554,  0.99957966,  0.99924313,  0.99991596,
        0.99932728,  0.9998319 ,  0.99991596,  0.99966375,  0.99974784]), 'train_accuracy': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_recall': array([ 0.99932773,  0.9989916 ,  0.99915966,  0.99848739,  0.99983193,
        0.99865546,  0.99966387,  0.99983193,  0.99932773,  0.9994958 ]), 'score_time': array([ 0.13237   ,  0.11557102,  0.19442701,  0.11598396,  0.12582803,
        0.11401987,  0.11501098,  0.11397815,  0.11565709,  0.11469293]), 'train_f1': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'fit_time': array([ 0.51801109,  0.53224301,  0.55225205,  0.47438598,  0.66094303,
        0.46631408,  0.47936082,  0.54665899,  0.44873595,  0.43760705]), 'train_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_accuracy': array([ 0.99966387,  0.9994958 ,  0.99957983,  0.9992437 ,  0.99991597,
        0.99932773,  0.99983193,  0.99991597,  0.99966387,  0.9997479 ]), 'train_average_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'train_recall': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]), 'test_precision': array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])}
---------------
Test roc auc score micro
0.998277310924
------------
Test roc auc score macro
0.998277310924
------------
Test accuracy score
0.998277310924
------------
Test cohen_kappa_score score
0.996554621849
------------
Test precision_recall_fscore score micro
(0.99827731092436978, 0.99827731092436978, 0.99827731092436978, None)
------------
Test precision_recall_fscore score macro
(0.99828322586048068, 0.99827731092436967, 0.99827730581200314, None)
------------
Plotting Extreme Randomized Tree with reputation analysis
-------------------------------------------------------------------------
Adaboost Class. only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.78836806,  0.79170967,  0.79072563,  0.78136515,  0.80252792,
        0.7921494 ,  0.79116642,  0.78137581,  0.79272152,  0.78695315]), 'train_accuracy': array([ 0.79473389,  0.80079365,  0.79746965,  0.79109244,  0.80222222,
        0.7992437 ,  0.79673203,  0.79598506,  0.80120448,  0.78895425]), 'test_recall': array([ 0.76319328,  0.77361345,  0.77378151,  0.74840336,  0.7789916 ,
        0.76991597,  0.75865546,  0.7502521 ,  0.75781513,  0.76638655]), 'score_time': array([ 0.76161194,  0.56956506,  0.57422996,  0.57632804,  0.57321   ,
        0.60200405,  0.57657194,  0.57649398,  0.56984591,  0.60825706]), 'train_f1': array([ 0.78897251,  0.79631097,  0.79214221,  0.78248104,  0.79647174,
        0.79253548,  0.78765119,  0.78858249,  0.79132404,  0.78359359]), 'fit_time': array([ 4.89173794,  4.35100913,  5.06286597,  4.29656482,  5.37644291,
        5.21862102,  4.30540395,  4.23101902,  4.23791718,  4.92938995]), 'train_precision': array([ 0.8117568 ,  0.81464263,  0.81354197,  0.81612249,  0.82032301,
        0.81993332,  0.82448438,  0.81827309,  0.83271107,  0.80401595]), 'test_average_precision': array([ 0.90228928,  0.90130257,  0.9027626 ,  0.89947181,  0.90688019,
        0.90344549,  0.90699956,  0.89943468,  0.90134029,  0.90453825]), 'test_accuracy': array([ 0.79512605,  0.79647059,  0.79521008,  0.79058824,  0.80831933,
        0.79798319,  0.7997479 ,  0.79008403,  0.80184874,  0.79252101]), 'train_average_precision': array([ 0.90291301,  0.90246206,  0.90414692,  0.90177045,  0.90335983,
        0.90572303,  0.90527542,  0.90410314,  0.9022636 ,  0.90398114]), 'train_recall': array([ 0.76743231,  0.77878618,  0.7718394 ,  0.75150327,  0.77396825,
        0.76690943,  0.75396825,  0.76097106,  0.75385621,  0.76418301]), 'test_precision': array([ 0.81526032,  0.81067277,  0.80842845,  0.81736417,  0.8275308 ,
        0.81570513,  0.82658854,  0.81519357,  0.83099889,  0.80865402])}
---------------
Test roc auc score micro
0.798487394958
------------
Test roc auc score macro
0.798487394958
------------
Test accuracy score
0.798487394958
------------
Test cohen_kappa_score score
0.596974789916
------------
Test precision_recall_fscore score micro
(0.79848739495798315, 0.79848739495798315, 0.79848739495798315, None)
------------
Test precision_recall_fscore score macro
(0.79863886334101131, 0.79848739495798315, 0.79846184012994392, None)
------------
Plotting Adaboost Class. only bug information
-------------------------------------------------------------------------
Adaboost Class. with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.8368115 ,  0.83243705,  0.83673469,  0.84512928,  0.84285714,
        0.83247951,  0.84138999,  0.83716589,  0.84252844,  0.82961083]), 'train_accuracy': array([ 0.8394211 ,  0.8405042 ,  0.83616246,  0.84718954,  0.84803922,
        0.8419888 ,  0.84590103,  0.83727358,  0.83978525,  0.82955182]), 'test_recall': array([ 0.82218487,  0.8194958 ,  0.82      ,  0.81579832,  0.82302521,
        0.81932773,  0.82201681,  0.82907563,  0.82773109,  0.82403361]), 'score_time': array([ 0.58731413,  0.58173394,  0.60727787,  0.58307886,  0.58676505,
        0.60101199,  0.59076309,  0.59144402,  0.58741903,  0.58354712]), 'train_f1': array([ 0.83681873,  0.83801775,  0.83302407,  0.84199958,  0.84422409,
        0.83963954,  0.8416366 ,  0.83569341,  0.83736316,  0.82953431]), 'fit_time': array([ 6.11266899,  5.466712  ,  5.81396794,  6.09780407,  5.36178303,
        5.35522795,  5.46372795,  5.57657599,  5.71451116,  5.50067902]), 'train_precision': array([ 0.85060376,  0.85128887,  0.84929274,  0.87160217,  0.86596501,
        0.85231142,  0.86559034,  0.84388804,  0.85021653,  0.82961953]), 'test_average_precision': array([ 0.93474677,  0.93276401,  0.93513487,  0.93584067,  0.93408014,
        0.93394405,  0.93325569,  0.93478158,  0.93760555,  0.93654622]), 'test_accuracy': array([ 0.83966387,  0.83504202,  0.84      ,  0.8505042 ,  0.84655462,
        0.83512605,  0.84504202,  0.8387395 ,  0.84529412,  0.8307563 ]), 'train_average_precision': array([ 0.93417698,  0.93607984,  0.93420533,  0.93392586,  0.93480934,
        0.93575014,  0.9344287 ,  0.93446571,  0.93610603,  0.93587329]), 'train_recall': array([ 0.82347339,  0.82515406,  0.81736695,  0.81434174,  0.82354809,
        0.82733894,  0.81897292,  0.8276564 ,  0.82489262,  0.82944911]), 'test_precision': array([ 0.85196796,  0.84579358,  0.85416667,  0.876648  ,  0.86366843,
        0.8460604 ,  0.86169838,  0.8454156 ,  0.85786448,  0.83526405])}
---------------
Test roc auc score micro
0.84218487395
------------
Test roc auc score macro
0.84218487395
------------
Test accuracy score
0.84218487395
------------
Test cohen_kappa_score score
0.684369747899
------------
Test precision_recall_fscore score micro
(0.84218487394957986, 0.84218487394957986, 0.84218487394957986, None)
------------
Test precision_recall_fscore score macro
(0.84229765016005831, 0.84218487394957986, 0.84217187411015892, None)
------------
Plotting Adaboost Class. with reputation analysis
-------------------------------------------------------------------------
Logistic Regression only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.71262416,  0.71415294,  0.72026265,  0.71326316,  0.71774534,
        0.71059737,  0.72569795,  0.71669888,  0.72148185,  0.7165667 ]), 'train_accuracy': array([ 0.71926237,  0.71929972,  0.71876751,  0.71961718,  0.71905696,
        0.71976657,  0.71854342,  0.71943044,  0.71906629,  0.71910364]), 'test_recall': array([ 0.70537815,  0.7102521 ,  0.7189916 ,  0.71176471,  0.71478992,
        0.70773109,  0.72521008,  0.71663866,  0.72336134,  0.71277311]), 'score_time': array([ 0.012115  ,  0.01235199,  0.01251292,  0.01245093,  0.01209903,
        0.01244998,  0.01255393,  0.01210999,  0.01211691,  0.01215386]), 'train_f1': array([ 0.71908139,  0.71898748,  0.71834674,  0.71923181,  0.71873393,
        0.71941814,  0.71818556,  0.71901854,  0.71859334,  0.71880433]), 'fit_time': array([ 0.12625694,  0.10285687,  0.10598493,  0.10898209,  0.10630202,
        0.10395193,  0.10364008,  0.10837603,  0.10260105,  0.10458612]), 'train_precision': array([ 0.71954526,  0.71978814,  0.71942311,  0.72022171,  0.71956127,
        0.72031376,  0.71909986,  0.72007567,  0.71980513,  0.71957108]), 'test_average_precision': array([ 0.73760049,  0.7337523 ,  0.74177284,  0.73565413,  0.73883968,
        0.72974927,  0.75479148,  0.73736041,  0.74184263,  0.74564417]), 'test_accuracy': array([ 0.71554622,  0.71571429,  0.7207563 ,  0.71386555,  0.71890756,
        0.71176471,  0.72588235,  0.71672269,  0.7207563 ,  0.71806723]), 'train_average_precision': array([ 0.74061257,  0.7410317 ,  0.74010751,  0.74079997,  0.74045162,
        0.74143502,  0.73865107,  0.74060413,  0.74011054,  0.73969166]), 'train_recall': array([ 0.71861811,  0.71818861,  0.71727358,  0.71824463,  0.7179085 ,
        0.71852474,  0.71727358,  0.71796452,  0.71738562,  0.71803922]), 'test_precision': array([ 0.72002059,  0.71809686,  0.7215382 ,  0.71476793,  0.7207253 ,
        0.71348695,  0.72618647,  0.71675912,  0.7196121 ,  0.72040088])}
---------------
Test roc auc score micro
0.716554621849
------------
Test roc auc score macro
0.716554621849
------------
Test accuracy score
0.716554621849
------------
Test cohen_kappa_score score
0.433109243697
------------
Test precision_recall_fscore score micro
(0.71655462184873953, 0.71655462184873953, 0.71655462184873953, None)
------------
Test precision_recall_fscore score macro
(0.71656169325096808, 0.71655462184873953, 0.71655230799002911, None)
------------
Plotting Logistic Regression only bug information
-------------------------------------------------------------------------
Logistic Regression with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.72967548,  0.72287746,  0.72359022,  0.72453588,  0.7322468 ,
        0.71545263,  0.72296446,  0.72245655,  0.71845804,  0.7312709 ]), 'train_accuracy': array([ 0.72281979,  0.72349206,  0.72297852,  0.72323996,  0.72255836,
        0.72379085,  0.7231746 ,  0.72267974,  0.72353875,  0.72254902]), 'test_recall': array([ 0.73310924,  0.72621849,  0.72352941,  0.72806723,  0.74      ,
        0.71394958,  0.72302521,  0.71966387,  0.71731092,  0.73495798]), 'score_time': array([ 0.01322007,  0.01206613,  0.01270795,  0.01257586,  0.01231599,
        0.01243496,  0.0126369 ,  0.01273298,  0.0123651 ,  0.01244211]), 'train_f1': array([ 0.72304736,  0.72369845,  0.72324985,  0.72341815,  0.72256354,
        0.72411542,  0.72347411,  0.72298236,  0.72386619,  0.722738  ]), 'fit_time': array([ 0.30088592,  0.28982592,  0.28869605,  0.29162216,  0.29015589,
        0.29231405,  0.28516698,  0.28518605,  0.284549  ,  0.30375504]), 'train_precision': array([ 0.72245423,  0.72315868,  0.72254217,  0.72295268,  0.72255004,
        0.72326552,  0.72269221,  0.72219427,  0.72300986,  0.72224605]), 'test_average_precision': array([ 0.77388939,  0.77080812,  0.77029846,  0.77087786,  0.7762323 ,
        0.76866117,  0.77217817,  0.7801367 ,  0.77149628,  0.77734354]), 'test_accuracy': array([ 0.72840336,  0.72159664,  0.72361345,  0.72319328,  0.72941176,
        0.71605042,  0.72294118,  0.72352941,  0.71890756,  0.72991597]), 'train_average_precision': array([ 0.77406147,  0.77428552,  0.77456472,  0.77432052,  0.77389673,
        0.77460552,  0.77411161,  0.77362886,  0.77427907,  0.77366607]), 'train_recall': array([ 0.72364146,  0.72423903,  0.72395892,  0.72388422,  0.72257703,
        0.72496732,  0.7242577 ,  0.72377218,  0.72472456,  0.72323063]), 'test_precision': array([ 0.72627373,  0.71956703,  0.72365103,  0.72103862,  0.72465438,
        0.71696203,  0.72290371,  0.725271  ,  0.71960883,  0.72762063])}
---------------
Test roc auc score micro
0.724117647059
------------
Test roc auc score macro
0.724117647059
------------
Test accuracy score
0.724117647059
------------
Test cohen_kappa_score score
0.448235294118
------------
Test precision_recall_fscore score micro
(0.72411764705882353, 0.72411764705882353, 0.72411764705882364, None)
------------
Test precision_recall_fscore score macro
(0.72411871692855478, 0.72411764705882353, 0.72411731781531463, None)
------------
Plotting Logistic Regression with reputation analysis
-------------------------------------------------------------------------
Support Vector Classification only bug information
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.73290735,  0.73012087,  0.73065606,  0.72441195,  0.7250616 ,
        0.73052749,  0.72612885,  0.72071786,  0.73159182,  0.72815844]), 'train_accuracy': array([ 0.71167134,  0.71286648,  0.71132586,  0.71285714,  0.71230626,
        0.71169001,  0.71310924,  0.71200747,  0.71215686,  0.71289449]), 'test_recall': array([ 0.77109244,  0.77159664,  0.77210084,  0.76605042,  0.76655462,
        0.77159664,  0.76621849,  0.76268908,  0.7789916 ,  0.76621849]), 'score_time': array([ 70.45615292,  64.79959202,  63.1512928 ,  78.73946214,
        62.98271799,  71.76987004,  62.99104714,  65.15555787,
        68.03829622,  66.38926101]), 'train_f1': array([ 0.72767519,  0.7288566 ,  0.7270239 ,  0.7286492 ,  0.72801582,
        0.72747652,  0.72908584,  0.72748798,  0.72775923,  0.72899536]), 'fit_time': array([ 297.59176707,  328.49271917,  315.91773701,  366.26056099,
        377.13389897,  342.13735199,  295.18695998,  299.86510205,
        380.60131788,  310.54201078]), 'train_precision': array([ 0.68940913,  0.69040858,  0.68952754,  0.69066457,  0.69032074,
        0.68971115,  0.69062573,  0.69037797,  0.69033977,  0.69028425]), 'test_average_precision': array([ 0.72831981,  0.72141467,  0.73028221,  0.71971463,  0.72672786,
        0.72224927,  0.72768838,  0.71479979,  0.72159265,  0.73207053]), 'test_accuracy': array([ 0.7189916 ,  0.71478992,  0.71537815,  0.70857143,  0.70932773,
        0.71537815,  0.7110084 ,  0.70445378,  0.71420168,  0.71394958]), 'train_average_precision': array([ 0.72398489,  0.7254149 ,  0.72488663,  0.7247092 ,  0.72442151,
        0.72515265,  0.72491774,  0.72698802,  0.72595106,  0.72331366]), 'train_recall': array([ 0.77043884,  0.7718394 ,  0.76883287,  0.77105509,  0.77006536,
        0.76961718,  0.77208217,  0.76881419,  0.76946779,  0.77230626]), 'test_precision': array([ 0.69832572,  0.69287655,  0.69343396,  0.68706663,  0.68782989,
        0.69360931,  0.69002573,  0.68312509,  0.68962952,  0.69370055])}
---------------
Test roc auc score micro
0.706428571429
------------
Test roc auc score macro
0.706428571429
------------
Test accuracy score
0.706428571429
------------
Test cohen_kappa_score score
0.412857142857
------------
Test precision_recall_fscore score micro
(0.70642857142857141, 0.70642857142857141, 0.70642857142857141, None)
------------
Test precision_recall_fscore score macro
(0.70837800572247112, 0.70642857142857141, 0.70574035118103418, None)
------------
Plotting Support Vector Classification only bug information
-------------------------------------------------------------------------
Support Vector Classification with reputation analysis
-------------------------------------------------------------------------
Number of different class training dataset
[59500 59500]
---------------
Number of different class test dataset
[11900 11900]
---------------
Training scores
{'test_f1': array([ 0.75456356,  0.74931541,  0.75123722,  0.75451895,  0.74613614,
        0.75328106,  0.75068086,  0.75465174,  0.75662691,  0.74824075]), 'train_accuracy': array([ 0.74939309,  0.74513539,  0.74153128,  0.74977591,  0.74211951,
        0.74535014,  0.74550887,  0.74573296,  0.7494958 ,  0.74577031]), 'test_recall': array([ 0.76420168,  0.75882353,  0.76537815,  0.76117647,  0.76268908,
        0.76689076,  0.76436975,  0.7702521 ,  0.76756303,  0.7594958 ]), 'score_time': array([ 71.07852697,  71.17468095,  78.829638  ,  79.19277501,
        73.62153816,  73.61695409,  73.74114299,  73.39738202,
        73.25387502,  80.66731596]), 'train_f1': array([ 0.75237111,  0.74938485,  0.74717326,  0.75297501,  0.74763571,
        0.74953393,  0.74969235,  0.74995409,  0.75249772,  0.75005508]), 'fit_time': array([ 426.7757771 ,  467.63078594,  426.67588401,  417.37035298,
        435.55361986,  438.1669631 ,  392.23438501,  391.0151341 ,
        392.48160887,  398.45533705]), 'train_precision': array([ 0.7435355 ,  0.73709497,  0.73121201,  0.74346979,  0.73197831,
        0.73741846,  0.73756776,  0.73770729,  0.74358694,  0.73762323]), 'test_average_precision': array([ 0.79909798,  0.80585379,  0.81542907,  0.80665041,  0.80735915,
        0.80802503,  0.81053801,  0.80588918,  0.80469203,  0.80458509]), 'test_accuracy': array([ 0.75142857,  0.74613445,  0.74655462,  0.75235294,  0.7405042 ,
        0.74882353,  0.74613445,  0.74957983,  0.75310924,  0.74445378]), 'train_average_precision': array([ 0.80777975,  0.80664232,  0.80641048,  0.80723129,  0.8067339 ,
        0.80682873,  0.80641564,  0.80726317,  0.80698204,  0.80699579]), 'train_recall': array([ 0.76141923,  0.7620915 ,  0.76384687,  0.76272642,  0.76397759,
        0.76205415,  0.76222222,  0.76261438,  0.76162465,  0.76291317]), 'test_precision': array([ 0.74516552,  0.74004262,  0.73760933,  0.74797688,  0.73028645,
        0.74014599,  0.73747365,  0.73967076,  0.74599804,  0.73731441])}
---------------
Test roc auc score micro
0.741134453782
------------
Test roc auc score macro
0.741134453782
------------
Test accuracy score
0.741134453782
------------
Test cohen_kappa_score score
0.482268907563
------------
Test precision_recall_fscore score micro
(0.74113445378151266, 0.74113445378151266, 0.74113445378151266, None)
------------
Test precision_recall_fscore score macro
(0.74130139154034191, 0.74113445378151255, 0.74108967377701118, None)
------------
Plotting Support Vector Classification with reputation analysis
